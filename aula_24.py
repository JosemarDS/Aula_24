# -*- coding: utf-8 -*-
"""Aula_24

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PKQiBF5b5zskx2JvmthbScEJtXVsqcxX

ESTILOS DENTRO DA TKINTER

A decisão de usar `import tkinter as tk` em vez de `from tkinter import *` é uma questão de boas práticas de programação e pode depender do contexto do seu código. Ambas as abordagens têm vantagens e desvantagens.

Usar `import tkinter as tk` é geralmente considerado uma prática mais segura e recomendada por várias razões:

1. **Evita Conflitos de Nomes:** Quando você importa todo o módulo com `import tkinter as tk`, você cria um alias (apelido) para o módulo que é `tk`. Isso evita conflitos de nomes entre os objetos do módulo Tkinter e outros objetos que você pode estar usando em seu programa. Se você usar `from tkinter import *`, todos os nomes do módulo Tkinter serão importados diretamente no espaço de nomes atual, o que pode causar conflitos de nomes.
2. **Legibilidade do Código:** Quando você lê o código, é mais claro saber que objetos pertencem ao módulo Tkinter, pois você sempre os acessa usando `tk.<nome_do_objeto>`. Isso torna o código mais legível e facilita a identificação das origens dos objetos.
3. **Melhor Prática para Grandes Projetos:** Em projetos maiores e mais complexos, é comum evitar a importação de todos os nomes diretamente no espaço de nomes global, pois isso pode tornar o código mais difícil de entender e depurar.

No entanto, a abordagem `from tkinter import *` pode ser conveniente para scripts pequenos ou em situações específicas, onde você tem certeza de que não haverá conflitos de nomes. Ela economiza digitação, pois você pode acessar os objetos do módulo diretamente, sem a necessidade de prefixar com `tk.`.

Em resumo, a escolha entre `import tkinter as tk` e `from tkinter import *` depende do contexto do seu projeto, do tamanho do código e das considerações de clareza e segurança. Para projetos maiores e mais organizados, a abordagem `import tkinter as tk` é geralmente preferida.
MANIPULANDO API’S

O QUE É UMA API:

Uma API (Interface de Programação de Aplicativos) é um conjunto de regras e protocolos que permite que diferentes softwares se comuniquem uns com os outros. Ela define as maneiras pelas quais componentes de software devem interagir, tornando possível a integração de diferentes sistemas e aplicativos. As APIs são usadas para solicitar e fornecer dados ou funcionalidades entre aplicativos.

Aqui estão alguns pontos-chave relacionados a APIs:

1. **Comunicação entre Aplicativos:** As APIs permitem que um aplicativo faça solicitações a outro aplicativo, solicitando dados, funcionalidades ou serviços específicos. Isso é fundamental para a integração de sistemas e a automação de tarefas.
2. **Padrões e Protocolos:** As APIs geralmente seguem padrões e protocolos bem definidos, como HTTP (para APIs da web), SOAP, REST, GraphQL, etc. Esses padrões facilitam a comunicação entre diferentes aplicativos, independentemente das linguagens de programação que estão sendo usadas.
3. **Endpoints:** As APIs geralmente fornecem endpoints, que são URLs específicos que você pode acessar para realizar operações específicas. Por exemplo, uma API da web pode ter endpoints para buscar informações, criar registros, atualizar dados, etc.
4. **Autenticação e Autorização:** Muitas APIs requerem autenticação para garantir que apenas usuários autorizados tenham acesso a determinados recursos. Isso é feito por meio de chaves de API, tokens de acesso, ou outros mecanismos de autenticação.
5. **Formato de Dados:** As APIs normalmente respondem em um formato de dados específico, como JSON ou XML. Esses formatos tornam os dados fáceis de serem consumidos e processados por aplicativos.
6. **Uso Comum de APIs:** APIs são usadas em uma ampla variedade de cenários, como redes sociais (por exemplo, a API do Twitter), serviços de pagamento (por exemplo, a API do PayPal), serviços de mapas (por exemplo, a API do Google Maps), e muitos outros.
7. **Desenvolvimento de Aplicativos:** Desenvolvedores de software usam APIs para incorporar funcionalidades de terceiros em seus próprios aplicativos, o que economiza tempo e recursos.
8. **Documentação:** A maioria das APIs é acompanhada por documentação detalhada que descreve como usar a API, quais endpoints estão disponíveis e como autenticar as solicitações.

Se você deseja usar uma API, geralmente começa consultando a documentação da API para entender como usá-la e, em seguida, faz solicitações apropriadas usando a linguagem de programação de sua escolha. A resposta da API é processada para obter os dados ou funcionalidades desejados.

Lembre-se de que, ao usar APIs, você deve respeitar os termos de uso e as políticas de autenticação e autorização definidos pela API específica que está sendo usada.

COMO USAR UMA API COM PYTHON:

Usar uma API em Python envolve algumas etapas fundamentais, que incluem a importação de bibliotecas apropriadas, fazer solicitações para a API e processar as respostas. Vou fornecer um exemplo simples de como usar a API REST em Python usando a biblioteca `requests`.

API, que significa "Interface de Programação de Aplicativos", é um termo genérico que se refere a qualquer conjunto de regras e protocolos que permite que diferentes softwares se comuniquem uns com os outros. Pode ser usado para descrever vários tipos de APIs, incluindo APIs da web, APIs de banco de dados, APIs de sistema operacional, entre outras. No entanto, quando falamos sobre "API REST" ou "API RESTful", estamos nos referindo a um tipo específico de API da web que segue princípios e práticas de design particulares.

Aqui estão as principais diferenças entre uma API REST e uma API em geral:

**API em Geral:**

1. É um termo genérico que se refere a qualquer conjunto de regras e protocolos que permitem a comunicação entre softwares.
2. Pode abranger uma ampla variedade de tecnologias e abordagens para expor funcionalidades ou dados de um software.
3. Pode ser baseada em diferentes protocolos de comunicação, como HTTP, SOAP, WebSocket, gRPC, etc.
4. Pode ter diferentes estilos de arquitetura, como RPC (Chamada de Procedimento Remoto), SOA (Arquitetura Orientada a Serviços) e outros.
**API REST (ou API RESTful):**

1. É um tipo específico de API da web que segue os princípios da arquitetura REST (Representational State Transfer).
2. Usa HTTP como protocolo de comunicação padrão e geralmente opera na web.
3. Utiliza os métodos HTTP (GET, POST, PUT, DELETE, etc.) para realizar operações em recursos identificados por URLs.
4. Segue o conceito de recursos, que são entidades identificadas por URLs e representadas em formatos como JSON ou XML.
5. Utiliza o estado (statE) e as operações (transfer) para realizar ações em recursos, criando um sistema web simples e escalável.

Em resumo, uma API é um conceito amplo que engloba qualquer mecanismo que permite que softwares se comuniquem, enquanto uma API REST é um tipo específico de API da web que segue os princípios da arquitetura REST e usa o protocolo HTTP como padrão. As APIs REST são comuns na construção de serviços web, como APIs de mídias sociais, APIs de previsão do tempo e muitos outros serviços onlineE

Neste exemplo, usaremos a API pública JSONPlaceholder ([https://jsonplaceholder.typicode.com](https://jsonplaceholder.typicode.com/)), que fornece dados fictícios para fins de teste. Vamos fazer uma solicitação para buscar uma lista de usuários.

1. **Instalação da biblioteca `requests`:** Se você ainda não tiver a biblioteca `requests` instalada, você pode instalá-la com o comando `pip`:
"""

pip install requests
#Baixar pelo Prompt

import requests

# URL da API que queremos acessar
url = '<https://jsonplaceholder.typicode.com/users>'

# Fazendo uma solicitação GET para a API
response = requests.get(url)

# Verificando se a solicitação foi bem-sucedida
if response.status_code == 200:
    # A resposta da API está em formato JSON, então podemos analisá-la para obter os dados
    data = response.json()

    # Agora, você pode processar e trabalhar com os dados conforme necessário
    for user in data:
        print(f"Nome: {user['name']}, Email: {user['email']}")
else:
    print(f"A solicitação falhou com código de status {response.status_code}")

"""Neste exemplo, importamos a biblioteca `requests`, fazemos uma solicitação GET para a URL da API que fornece dados de usuários e verificamos se a solicitação foi bem-sucedida (código de status 200). Em seguida, analisamos os dados da resposta, que estão em formato JSON, e exibimos o nome e o email de cada usuário.

Certifique-se de substituir a URL no exemplo pelo endpoint da API que deseja acessar e ajustar o processamento de dados de acordo com a estrutura da resposta da API que você está usando.

Lembre-se de que, para acessar uma API específica, você deve ler a documentação da API para entender as rotas disponíveis, os parâmetros necessários, a autenticação, os limites de uso, entre outros detalhes específicos da API que está sendo usada.

ATIVIDADE:

UTILIZANDO UMA API

Os códigos de status HTTP são códigos numéricos de três dígitos que são retornados pelo servidor web em resposta a uma solicitação HTTP. Eles fornecem informações sobre o resultado da solicitação. Aqui estão alguns dos códigos de status HTTP mais comuns:

1. **200 OK**: Indica que a solicitação foi bem-sucedida. Isso é frequentemente usado para respostas normais de sucesso.
2. **201 Created**: Indica que a solicitação resultou na criação de um novo recurso (por exemplo, ao criar um novo objeto em um banco de dados).
3. **204 No Content**: Indica que a solicitação foi bem-sucedida, mas não há conteúdo para ser retornado na resposta. Isso é comum em solicitações de exclusão.
4. **400 Bad Request**: Indica que a solicitação do cliente era inválida de alguma forma. Isso pode ser devido a erros nos parâmetros da solicitação.
5. **401 Unauthorized**: Indica que a solicitação requer autenticação e o cliente não forneceu credenciais válidas.
6. **403 Forbidden**: Indica que o servidor entende a solicitação, mas o acesso ao recurso é proibido para o cliente.
7. **404 Not Found**: Indica que o recurso solicitado não foi encontrado no servidor.
8. **500 Internal Server Error**: Indica um erro interno no servidor que impediu o processamento da solicitação.
9.

Estes são apenas alguns dos códigos de status HTTP mais comuns. Existem muitos outros códigos de status HTTP que são usados para comunicar diferentes situações entre o cliente e o servidor. O código de status 200 (OK) é geralmente usado para indicar que a solicitação foi bem-sucedida e que a resposta contém os dados ou informações solicitados. Outros códigos de status indicam diferentes tipos de respostas, como erros, redirecionamentos, etc.
"""

import tkinter as tk
import requests

def obter_dados():
  url = 'https://api.coindesk.com/v1/bpi/currentprice.json'
  resposta = requests.get(url)
  dados = resposta.json()
  cotacao = dados['bpi']['usd']['rate']
  resultado_label.config(text=f'Cotação do Bitcoin: {cotacao}')


root = tk.Tk()
root.title('Cotacao do Bitcoin')

btn = tk.Button(root, text='obter', command=obter_dados, height=20)
btn.pack()

resultado_label = tk.Label(root, text='rotulo', font=('Arial', 16))
resultado_label.pack()

window.mainloop()

import tkinter as tk
import requests

def search_pokemon():
    pokemon_name = entry.get()
    response = requests.get(f"https://pokeapi.co/api/v2/pokemon/{pokemon_name.lower()}")
    if response.status_code == 200:
        data = response.json()
        result_label.config(text=f"Nome: {data['name'].capitalize()}\n"
                                 f"Altura: {data['height']}\n"
                                 f"Peso: {data['weight']}")
    else:
        result_label.config(text="Pokémon não encontrado.")

# Criação da janela
window = tk.Tk()
window.title("Informações de Pokémon")

# Caixa de entrada
entry = tk.Entry(window, width=35)
entry.pack(pady=10)

# Botão de pesquisa
search_button = tk.Button(window, text="Buscar", command=search_pokemon, font= 'arial', fg='blue', width=15 )
search_button.pack()

# Rótulo para exibir os resultados
result_label = tk.Label(window, text="", width=150, font='arial', fg='green', height=35 )
result_label.pack()

# Inicia a janela
window.mainloop()



#codigo correto.